// Code generated by go-bindata. DO NOT EDIT.
// sources:
// tmpl/monitor.tmpl (1.516kB)
// tmpl/screenboard.tmpl (8.397kB)
// tmpl/timeboard.tmpl (2.278kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _tmplMonitorTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x94\xcf\x8e\xda\x30\x10\xc6\xef\x79\x8a\x51\xce\x2d\x4f\xb0\x1c\xaa\x5d\xaa\xe5\x50\x50\x57\x48\x7b\xa8\x2a\xcb\x8a\x07\x62\x6d\xb0\x59\xc7\x21\x42\xae\xdf\xbd\xf2\x3f\x88\x83\x69\x39\xc5\xdf\xf7\xcd\x2f\x93\xc9\x04\x85\xbd\x1c\x54\x83\x50\x33\xaa\x29\x93\x07\x72\x94\x82\x6b\xa9\x6a\xa8\x19\x23\xc6\xc0\x62\xcd\xc0\xda\x1a\x4c\x05\x20\xe8\x11\x21\xff\x2d\xa1\x76\xa1\x8d\x73\xac\xad\x2b\x00\x7d\x39\x3d\x08\xed\x9c\x13\x42\xc6\x7c\x05\xbe\x87\xc5\x8e\x1e\x7a\xb0\xd6\x95\xb9\xab\x79\xd9\x2f\x63\x14\x15\x07\x0c\x41\x6b\x6b\x63\x16\xd6\xd6\x5f\x8c\x41\xc1\xac\xfd\x1d\x49\x28\x58\x80\x1c\xb1\xef\xe9\x01\x73\xc8\xd3\xd3\x6a\xbb\xab\x5c\x03\x3f\xa2\x6d\x6d\xe5\x24\x00\xec\x1b\xda\x51\xcd\xa5\x20\xa9\x74\x9a\xdf\x9e\x9c\xd5\x2f\x56\xd7\xd8\x8c\x50\x01\x7c\x0e\xa8\x2e\xb0\x04\x97\xff\xe9\xaf\xff\x78\xec\x09\x9f\x5b\xaa\x68\xa3\x51\xf9\x27\x8c\xad\x8e\x5c\xb7\x57\x70\x68\x3a\xcd\x62\x23\x35\xdf\x5f\x36\xf2\x85\x6a\x1a\x1c\xe1\x15\x22\x24\x71\x6f\x27\x3c\x8d\x9f\xf6\x5d\x32\x9b\x42\x02\xbe\x61\x00\xac\x85\x46\x75\xa6\x5d\x70\x55\x54\x09\x4f\x72\x80\x96\xd3\x45\x70\xb8\xff\xb7\x81\x71\x9d\x35\x4a\xbd\x32\xed\x71\x92\x29\x92\x76\xfc\x88\x72\xd0\xaf\x71\x07\xc2\x89\xb4\x91\x91\xbb\x45\xc0\x5a\x34\xdd\xc0\xf0\xb6\x47\x3c\x08\xc4\xef\x53\xc0\xdc\x65\x1e\x4c\xeb\x73\xe0\x0a\xbf\x0f\x5d\xf7\xce\x05\x93\x63\x1a\x97\x97\xc9\x7e\xe8\x3a\x32\x06\x23\x0d\xac\x58\x50\x9e\x18\x8e\xaf\xb2\xd7\x2f\xd8\xd1\x4b\x1c\x19\x8e\xa4\x95\xbd\x26\xcc\x6b\x71\x68\x77\xb1\x22\x6d\x75\xa6\xdd\xe0\xf7\x71\x92\xc4\xab\x98\x21\x8b\xd9\x09\x75\xfa\x32\x5a\x85\x7d\x2b\x3b\x36\x19\x53\xd8\xd7\xb9\xa3\x6f\xe7\xa5\xff\x67\xb8\x41\xb6\x1f\x21\x02\x20\x3f\x62\x0b\x37\x29\x7b\x9a\x5b\xcd\x3b\x55\x82\x8b\x43\x92\xc7\x78\x0c\xd5\x33\xf3\xdf\x88\x37\x6c\xe4\xd9\x7d\x84\x39\x8a\xa8\xa4\x67\xcc\x79\xfa\x01\xfb\x59\x71\xcd\x9b\xf4\x45\x00\x34\xe9\x1c\x60\x73\xfb\x3f\x94\xf9\x4d\x13\x6d\xde\xe3\xa3\x7c\x86\x2f\xae\x48\xe9\x50\xd9\xea\x6f\x00\x00\x00\xff\xff\x9b\xa1\xbd\x13\xec\x05\x00\x00")

func tmplMonitorTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplMonitorTmpl,
		"tmpl/monitor.tmpl",
	)
}

func tmplMonitorTmpl() (*asset, error) {
	bytes, err := tmplMonitorTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/monitor.tmpl", size: 1516, mode: os.FileMode(0644), modTime: time.Unix(1600988145, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x92, 0x77, 0x8e, 0x15, 0x50, 0xb9, 0x1a, 0xe1, 0x19, 0xb1, 0x7a, 0x80, 0x1f, 0x11, 0x3, 0x12, 0xe5, 0x61, 0xb1, 0xae, 0xb8, 0x3, 0x48, 0x7d, 0xa6, 0x7b, 0x5, 0xce, 0x13, 0x24, 0xef, 0xec}}
	return a, nil
}

var _tmplScreenboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x59\xdb\x72\xdb\x38\x12\x7d\xf7\x57\xa0\xf4\xbc\x71\xbe\x20\x0f\x8e\x9d\x8b\xab\xec\x8d\xd7\x72\x9c\xdd\x9d\x9a\x62\xc1\x64\x8b\x42\x99\x24\x14\x00\x94\x2d\x6b\xf8\xef\x53\xb8\x37\x28\xde\x32\x35\xe3\x17\x0b\xe7\x34\x0e\x1a\x40\xb3\x71\x13\x20\x79\x2b\x72\x20\xab\x82\x2a\x5a\xf0\x32\x93\xb9\x00\x68\x9e\x38\x15\xc5\x8a\xac\x8a\x22\x3b\x1e\xc9\xf9\x75\x41\xba\x6e\x45\x8e\x67\x84\x28\xa6\x2a\x20\x1f\xc8\x4a\xe3\x0f\xa6\xd0\x75\xab\x33\x42\x8e\xc7\x77\x84\x6d\xc8\xf9\x3d\xd0\xe2\x5b\x53\x1d\x48\xd7\x9d\x11\x22\x80\x16\x19\xd7\xc5\x0f\x44\xd7\x48\x59\x5d\x07\x9a\x22\x16\xb4\xc0\x7a\x4b\x05\x38\x4c\xda\xdf\xb6\x2e\x26\x06\x6b\x3e\x40\xbd\xab\xa8\x82\x47\x2a\x18\x7d\xaa\x40\x46\xfa\x85\xa9\xed\xa4\x81\xa0\x4d\x09\xe4\xdc\x02\xca\xd9\x65\x7b\x67\xa8\x3d\x38\x23\x84\x90\x86\xd6\xa0\xff\xbb\x01\xf8\xb7\x2e\xda\xfe\x13\xb2\x13\xb0\x61\xaf\x81\xbb\xb3\x45\xcf\x16\xb0\xa1\x6d\xa5\x3c\x7b\xe5\x8a\x96\x1e\xec\xd2\x50\x21\xe9\xce\x0f\x56\x94\xa0\xc6\x3a\xf1\x62\xd8\xe0\xb9\x3a\xec\xe2\xbc\xe9\xdf\xde\xb1\x57\x8f\xfe\x37\x40\x07\x0f\xfd\x2f\x40\x61\x8c\xdd\x94\x5b\xcd\x93\x60\x78\x80\x57\x95\xd4\x09\x9d\xe8\x49\x5c\x54\xac\x6c\x12\x9d\x8c\x1a\x08\xab\x79\xa3\x79\xb9\x35\x7b\x4b\xbd\xca\xa4\x46\xb0\x98\x33\x99\xd4\xfa\x0a\xac\xdc\x2a\x8f\x6e\x6d\xc9\x89\x04\x6e\x52\xe1\x07\x2b\xd4\xd6\x83\x2f\xa6\xe0\xea\x7b\x66\xba\x33\x76\xfc\x6c\x3f\xf4\x6f\xdf\x83\x05\xe3\x7a\xc9\x2b\x2e\x3c\x98\x9b\x82\xab\xed\x99\x99\x71\xac\x01\x63\xee\x93\x41\xa8\xd2\xbf\x7d\x3c\x11\x52\xb1\x3d\x64\x72\x47\xc3\x9c\xdd\xb0\x3d\xac\x75\xd9\xb7\xd4\x8d\xb5\x37\xd8\x7c\x05\x57\xb0\x19\xf2\x20\x21\x14\xab\x20\x2b\x60\x83\x1c\xf1\x12\x8f\xec\xcd\x5b\x11\xb2\x67\x6f\xde\x2f\x8b\xaf\x90\x35\x6a\x1f\x8d\x5f\x2b\x15\xaf\xbf\x37\x4c\x45\x2e\x37\x58\xd6\x6a\xd0\x0f\x26\x36\x9b\x15\xbd\x68\x15\x97\x39\x8d\xdf\x0c\x21\x34\x40\x4e\x11\xdb\xcc\x0a\xea\x48\x48\x3e\x1e\x1b\x28\xbd\xaf\x07\x19\xcd\x2a\xde\xc3\xcf\x16\xa4\xcf\x23\xe9\xe0\x0f\x73\x49\x9e\xd1\x7f\xc2\x9a\xa1\x39\x89\xf2\xff\x69\x41\x1c\xa2\x29\x21\x3f\xbd\x97\x9e\x59\x25\x75\x12\x1f\x51\xbf\x6d\xce\x0a\xf8\x68\x3e\x9b\xd1\x31\x8d\xf6\xc5\x7e\x6a\x30\xc3\x92\xd8\x6c\x91\xee\x2d\x28\xc1\x72\xcc\xd4\x16\x71\x82\x81\x5f\xd6\x5b\x78\x55\x9f\x59\xa5\x40\x24\x7d\xd6\x13\xbd\xb1\x30\x9a\xe9\x60\xb8\x48\xfa\x86\xd5\x38\xc2\xf5\x77\x5c\xc7\xe8\xf6\xec\x22\xa9\x8b\xb2\x14\x50\x52\xc5\x13\x2f\x69\x44\x7d\x80\x63\xbb\x45\xca\x97\xbc\xde\x51\x01\x0f\x1c\x93\xb9\x05\x33\xc5\x63\x62\x8b\x66\xcb\x74\xb7\x3a\x74\xfb\xd3\x9f\x1b\x34\x99\xff\xc4\x70\x91\xf4\x37\x51\x80\xf8\x98\x44\x3a\xd7\x50\xf6\x14\x96\xd3\x68\xb2\x5c\xf1\x8a\x89\x53\xc9\x82\x89\x44\xd3\x1a\x2d\x12\xfd\xf4\xaa\x04\xbd\xe4\x15\xe6\x40\x63\x59\xce\x2b\x2f\x8a\x8c\x16\x89\x5e\x37\xb9\x00\x2a\xe1\x0b\xe7\x09\xcf\x1c\x9e\x95\x9a\x70\xe2\x3d\xe3\x85\xf1\xd0\x14\x4c\x31\xde\xd0\xea\x33\x17\x35\xc5\x19\x09\xe7\xab\x01\xbb\x77\x3d\xc3\x93\xe4\xa5\x03\x2b\xd4\xca\x36\xa6\x5a\x92\xc9\x46\x96\x58\x5f\x77\x74\xa1\x1d\xed\x55\x14\xbc\xa3\x15\x28\x05\x29\xb9\x73\xa0\xdf\x48\x06\x9b\xc5\xb2\xf6\xbb\xe8\x7f\x98\xfe\x0b\xc2\x9f\x66\x62\xb9\x58\xff\xba\xd9\x83\x50\x29\xc7\x2c\x16\x26\xd9\x59\x2c\xd6\x7c\xa4\x55\xdb\x1b\x88\xbd\x81\xfc\x2a\xee\xf8\xe5\x4e\xd6\xb4\x84\xef\xf7\x37\x3d\x37\x35\x9a\xb5\x22\xc4\x3a\x32\x9b\x91\xee\xe6\x22\x75\x19\x64\x0e\x39\xea\x50\xc1\x70\x08\x9f\x50\xd2\x00\xc3\x01\xf9\x0f\xc5\x4f\x3f\x41\xce\x2c\xb7\x33\x6a\xc9\x9e\xd8\xfe\x4d\xec\x8c\xc7\x87\x9f\xbc\x7f\x6f\xc6\xe2\x2f\x8e\xf9\x03\x2d\xed\x4a\x99\xe4\x0e\x45\x4b\xb7\xa4\x4a\xf2\x81\xfc\x76\x3c\xba\xfc\x10\xad\xbb\x6e\x75\x3c\x9e\x77\xdd\xea\x5f\xc7\x23\x34\x45\xd7\xfd\x3e\xde\x9a\xf6\xd1\x6d\x86\xa6\xb6\x5d\xf3\x80\x49\xd5\x7b\x68\x92\x04\x16\x83\x64\x90\x3a\xc9\x6c\xa0\xad\x92\xc8\x19\xdd\x7b\x69\xc7\x8d\x79\xcf\xa9\x77\x27\x6e\x0e\x23\x3d\xd7\x6f\xa9\x78\x4e\x06\x3a\xba\x3e\x48\x9d\xb8\x5e\x1b\xab\xc1\x0d\xe5\xdf\xb5\x13\xbc\xa1\x4f\x90\x2c\x83\x95\x01\xfc\x46\xc8\xb1\x8b\xa4\x4e\x72\xd7\x4c\xe6\x1a\x8c\x9b\xa1\xe1\x5f\x1c\x35\x5a\xc0\x1f\x8d\xce\x06\xf8\x89\xf3\x66\x72\x76\xd6\x3b\xcc\xe4\xe8\x1c\x0d\x26\x4f\x8f\xf8\xd8\x84\x4f\x4b\xc9\x39\x69\xa4\xee\x9d\x80\x9c\x49\xc6\xc3\x91\x66\x17\x80\x78\x97\x12\x2c\x66\xcf\xcf\xe9\xd5\xc2\x82\xb3\xd1\x88\xd6\x67\xde\x24\x63\xb3\xe1\x4d\x3a\x36\xc8\x60\x52\xe8\xa2\x02\xa1\xae\xaf\x3c\x4c\x75\x31\x63\x61\x3f\x14\xe9\x69\x95\x56\xf1\x7b\xd8\x08\x90\x21\x97\xea\x93\x64\x26\x1c\x86\x0e\x93\xd1\x6c\x52\xf1\x06\x4a\x84\x56\xb6\xe4\xc3\xdf\x73\x0b\x14\xf0\x20\x59\x95\x64\x98\x12\xa3\x49\xb9\xe4\xa8\x68\xce\x64\xc3\xe9\x6a\x2c\x06\xe3\x5a\x8f\xd6\x77\xbc\xb4\x8f\xdd\x9c\x6c\x21\x7f\x0e\x37\x27\xa6\x10\x8e\x01\x96\x99\xac\xfe\x45\xf0\x76\xc7\x9a\xd2\xe3\xa5\x2f\x3b\x11\xc4\xcf\xeb\x24\x22\x89\xc2\xfc\x05\x4e\xfe\x7c\xc7\x65\xbc\x28\xc9\x9f\xb3\x1d\x97\xf1\x12\xcc\xd3\xb3\x2a\x9f\x8a\x12\x12\x19\xd0\x00\xd2\x71\x06\xd3\x77\x69\x0f\xb7\x61\x3a\xb6\xaa\x0e\xf3\xe1\xf0\x59\x27\xb0\x03\xb8\xed\xb9\xba\x1f\xcb\x1c\xef\xd2\x9f\xca\x64\x87\x1e\xd9\x49\x11\xb3\xbe\xe2\xb8\x36\xc9\x39\x09\x6b\x6c\x32\xa9\xb5\x66\x6f\x28\x38\xa4\x2d\x39\x91\xc0\x4d\x2a\xdc\x52\x51\xb2\x90\xd2\x6a\x5b\xf2\xf7\x0a\x9e\x9b\xee\x4f\xb3\x0f\x3d\x69\xf6\xa1\x0b\x06\x9d\x76\x1e\xc4\x9e\xe5\xe0\xfe\x85\x4e\xd8\x62\xe6\xfe\x87\xde\xf4\x8d\x97\x48\xbb\x3b\xf4\x44\xd7\x5c\xb3\xa7\xa2\xc9\x55\xfb\xf8\x48\xc3\x23\x08\xbc\x94\xe8\x19\xcb\xf6\x0e\x8b\x83\x8e\xcc\xa6\x13\x1c\x3d\xf0\x56\xf5\x34\x2b\x03\xf6\x55\xfb\xa6\xd3\x33\xda\x4a\xb5\xde\xf2\x97\xaf\x2c\x9e\x64\xeb\x56\xaa\x4c\x6e\xf9\x4b\xb6\xd5\xa8\x9f\xdf\xd4\x72\x91\xea\x27\x21\xb8\x18\xd0\x05\x8b\xf7\x94\x83\xf5\x22\xed\x1b\xaa\xa0\xc9\x0f\xa7\xe2\x95\x23\x7a\xea\xd1\x7e\x91\xfc\x47\x01\xf4\xb9\xe0\x2f\xcd\x69\x03\x4f\x81\xea\x35\x81\xeb\x2c\x6a\xe4\x8a\x49\x25\xd8\x53\xab\xd0\xa4\xc6\x76\x0a\xcc\xf6\x9a\xea\xd5\x5c\xd4\xda\xbd\x7b\x64\xbb\x61\x52\x9d\xb6\xe6\x9f\xe0\xb2\x8a\x49\xd5\x6f\xae\x57\x75\xb2\xb9\x2b\x26\x77\x15\x3d\xd8\x6b\x0f\x4f\x16\x16\x8c\xb7\x1a\xf6\xf1\xa9\x67\x3a\xff\xac\x70\x27\x60\x03\x02\x9a\x98\x02\x4c\x1a\xcd\x76\x11\xc7\x57\x20\x89\xf9\xf4\x2a\xc1\x0a\xf8\x3f\x08\x7e\xc9\xdb\x26\x7e\x0a\x5b\x56\x40\xf6\x06\x82\x67\xb9\xc5\xfd\xda\xd1\xb7\x9e\x49\x9b\x0d\x2d\x61\xad\xa8\x6a\xa5\x1e\xcd\xe4\xed\xaa\x36\x64\x26\x0d\x6b\xa7\x22\x79\xce\x1a\xab\xbc\xb8\x45\xfc\x1e\x36\xd0\xa2\x7d\xa5\xc2\x6f\x3c\x63\x95\x7f\xad\x45\xbc\x68\x0d\xb5\x88\x97\xb0\xb1\xca\xbf\xd6\x62\xb2\xdf\x1e\x6a\x32\xd9\x7e\x8f\x56\x9f\x3e\x22\x50\x41\x6b\x89\x51\x7b\x98\x4c\xf1\x9d\x2d\x9d\xbe\x0c\xad\x39\xbe\xad\x92\x3c\xde\x53\x39\x66\xd1\xb3\x4b\x44\x47\x9f\xe6\x26\x14\x4c\xcc\x46\xd8\x04\x76\xfc\x68\x2c\x37\x2b\xb2\x56\x34\xe9\x89\x29\xfa\xae\x38\x6e\x44\x64\xf4\x1c\x38\xfc\xcd\xb7\x75\x23\xd1\xb7\x6e\x8a\xf6\x1d\xde\x93\x7f\x10\x90\x39\xdd\xc1\xe5\x96\x0a\x9a\xe3\x7b\x95\xb1\xc5\x94\x97\x12\x82\xf7\x95\x2d\xf9\xd5\xd3\x73\x03\x61\xa0\xcf\xb6\xf6\x35\x7b\xe2\x65\xbc\x3b\xfb\x33\x00\x00\xff\xff\xe2\x1e\x88\x17\xcd\x20\x00\x00")

func tmplScreenboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplScreenboardTmpl,
		"tmpl/screenboard.tmpl",
	)
}

func tmplScreenboardTmpl() (*asset, error) {
	bytes, err := tmplScreenboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/screenboard.tmpl", size: 8397, mode: os.FileMode(0644), modTime: time.Unix(1600988145, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x50, 0xf0, 0x62, 0x5a, 0xca, 0xfb, 0x51, 0x2b, 0x75, 0x9f, 0xea, 0xa2, 0x5e, 0x58, 0x58, 0x7b, 0xd8, 0x32, 0x14, 0x2d, 0x31, 0xa9, 0x34, 0x67, 0xed, 0xb2, 0x6c, 0x9b, 0xf0, 0xf3, 0x87}}
	return a, nil
}

var _tmplTimeboardTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xcd\x6e\xdb\x38\x10\xbe\xfb\x29\x06\x42\x0e\xbb\x40\xec\x07\x58\x20\x87\x6c\x02\x07\x0b\x6c\xdb\x34\x09\xd2\x43\x51\x08\xb4\x34\x52\x88\xea\x2f\x14\x95\xc4\x21\xf8\xee\x05\x87\xbf\x96\x15\xf7\x50\x9f\x38\xdf\x7c\xf3\xcb\x19\x5a\x02\xc7\x7e\x12\x05\x42\x56\x32\xc9\xca\xbe\xce\x25\x6f\x71\xd7\x33\x51\x66\x90\x95\x65\xae\x14\x6c\xfe\x2b\x41\xeb\x0c\xd4\x0a\x40\x72\xd9\x20\xd8\xdf\x05\x64\x46\xfb\x40\x90\xd6\xd9\x0a\xa0\xc4\xb1\x10\x7c\x90\xbc\xef\xbc\xfa\x3a\x81\x2c\x49\x20\x2b\xf3\xbe\x6b\xf6\xe4\xc3\x70\xee\x90\x95\x5f\x0c\xb0\xd6\x7a\x05\xa0\xd4\x2b\x97\x4f\xb0\xb9\x11\x6c\x78\x1a\x03\x28\x58\x57\x23\x6c\x80\xc4\xda\xe8\x8c\xf9\xca\xa4\x62\xd3\x5a\x48\x28\x3a\xbb\xc6\x8a\x77\x9c\xd2\xb0\x0e\x01\x5e\xf8\x7b\x2c\xe3\x91\xbf\x1b\x85\x37\x5a\x03\xaf\x60\x73\x39\xc9\x7e\x2c\x58\x83\x46\xc5\x82\xe0\x4c\xa2\x56\xeb\xcc\x98\x60\x57\x3a\xd7\xde\xc1\xad\xc0\x82\x8f\x2e\xe8\x10\x04\xe7\x20\x6a\x3f\x74\x70\x23\xfa\x69\xa0\x1e\xd4\xe6\x04\x17\xf0\x5d\xa9\xb3\xda\xa2\xff\x5c\x78\x82\xd6\xbe\x3f\x67\xbc\x2b\xf1\xed\x1c\xce\xb0\xc1\x76\xc6\xe0\x95\x53\x6b\x7d\xae\x14\x05\xcb\x94\x22\x26\x9d\x08\xf9\xb1\x9c\xc8\x7d\xd1\x0f\x48\x89\x8c\xe6\xe4\x12\x19\x2d\x6a\xc2\x58\xc2\xa9\x44\x22\xe3\x8f\x12\x91\x7b\x7b\x1f\x84\x8e\x24\xf9\x39\x00\x18\x58\x83\x52\xe2\xc1\x84\x92\xc5\xe6\xd6\x69\xfc\x1d\x07\x6e\x5e\x35\x7c\x58\xe4\x6e\x8d\xc2\xf3\xf5\x72\x3a\x9f\x98\xf8\x89\x82\x1a\x63\x20\x3b\x6c\x07\xa0\x9b\x5b\x67\xd7\x92\x2a\xc9\x58\xee\x07\x8c\xcb\x64\x84\x98\xe1\x0b\x6b\xa6\x30\x6e\x8f\x24\x44\xa5\x52\x94\xc0\xff\x6c\x87\x8d\x89\xd4\xd0\xc1\x91\x2d\x7a\x34\x56\xb1\x88\xe3\x43\x28\xcb\xd6\x70\x87\xcf\x13\x8e\x72\xb1\x08\x61\x75\x49\x15\xcf\x49\xbf\xbf\x4e\x28\xf6\x71\x99\x42\xa6\x54\xdc\x5a\x6b\xaa\x78\x56\xb0\x52\x26\x09\x70\xfe\x83\xc9\x65\x5d\x0b\xac\x99\xec\x85\x4d\xc3\x80\x1d\x42\x96\xc1\x5f\xd7\x78\x87\xd5\xbd\x14\xbc\xab\x53\xde\xdf\xb4\xaa\xd1\xcc\xef\x6a\x44\x42\x34\x72\x68\xa2\xae\xe7\x61\xc3\x8c\x29\xe5\xba\x61\x91\xc0\x9b\x8f\x9d\xb1\xa4\x7d\x77\x43\x66\xb6\xdd\x1d\xfd\xae\xc7\xf1\x3b\xec\x78\x34\xfe\xc6\x4b\xf9\x64\x4c\x5f\xe9\xe0\x0c\x2d\x7a\xc2\xec\x74\x5b\x0f\x6d\x92\x3a\x5d\xe1\xbe\x15\x41\x61\xc7\xfa\xaa\xef\x4a\x7a\x2d\x59\xb3\xed\x45\xcb\xe4\x08\xe9\x80\x7f\xa8\xf6\x8f\x74\x6c\x69\x11\xa9\x79\x45\xdc\x59\xdf\x20\x6d\xdc\xe9\xbe\x1d\xce\x88\xf1\xdd\x0e\x4c\xa4\xf7\x7c\x15\x91\x38\x7f\xb1\x2c\xbf\x43\xcb\x8b\x75\x1c\x20\xb4\x63\x1a\x65\xdf\xfe\x5b\x5f\xf5\x0d\x79\x2e\x48\xce\x77\x75\x5e\x10\xe2\xa3\xcf\x68\xbf\xf5\xb8\x9d\x7b\xac\x16\x3d\x6e\x3f\xf6\x98\x5e\x9c\x55\x2c\x9d\x56\x91\x7a\xbc\xef\xcb\x92\x76\xcf\x70\x8a\xc5\x01\x78\xc0\x76\x68\x98\xc4\x47\x26\x38\xdb\x35\x18\x1e\xc0\xe4\x5f\xda\x7c\x2f\x38\x5a\xfe\xe2\x78\xe1\xee\x3b\xd6\x62\xf2\x66\x7c\x36\xa2\xbf\xb1\x41\x60\xc5\xdf\x20\xf9\x9b\x34\xa2\xd7\x96\x58\xb1\xa9\x91\xf1\x03\xc3\x8a\xe6\x13\x65\x31\x6d\xbd\xfa\x15\x00\x00\xff\xff\x28\x2c\xc9\x86\xe6\x08\x00\x00")

func tmplTimeboardTmplBytes() ([]byte, error) {
	return bindataRead(
		_tmplTimeboardTmpl,
		"tmpl/timeboard.tmpl",
	)
}

func tmplTimeboardTmpl() (*asset, error) {
	bytes, err := tmplTimeboardTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "tmpl/timeboard.tmpl", size: 2278, mode: os.FileMode(0644), modTime: time.Unix(1600988145, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd2, 0xf3, 0x83, 0xc0, 0xd0, 0xb5, 0x9, 0xb7, 0x64, 0xa9, 0xdc, 0x4b, 0x4c, 0x8e, 0x46, 0x61, 0x30, 0xe, 0x9f, 0x80, 0xeb, 0x58, 0x3a, 0xae, 0xf4, 0x5, 0x8, 0xf5, 0x41, 0xeb, 0xf7, 0xcf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"tmpl/monitor.tmpl":     tmplMonitorTmpl,
	"tmpl/screenboard.tmpl": tmplScreenboardTmpl,
	"tmpl/timeboard.tmpl":   tmplTimeboardTmpl,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"tmpl": &bintree{nil, map[string]*bintree{
		"monitor.tmpl":     &bintree{tmplMonitorTmpl, map[string]*bintree{}},
		"screenboard.tmpl": &bintree{tmplScreenboardTmpl, map[string]*bintree{}},
		"timeboard.tmpl":   &bintree{tmplTimeboardTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
